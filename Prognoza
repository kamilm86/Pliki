-- 1. Tworzenie tymczasowej tabeli do logowania zmian
CREATE TABLE #Anonimization_Log (
    ClientID NVARCHAR(50), -- ID klienta (np. NR_KLIENTA)
    TableName NVARCHAR(128), -- Nazwa tabeli
    ColumnName NVARCHAR(128), -- Nazwa kolumny
    OldValue NVARCHAR(MAX), -- Wartość przed zmianą
    NewValue NVARCHAR(MAX) -- Wartość po zmianie (stała)
);

-- 2. Pobranie listy tabel i kolumn do anonimizacji
DECLARE @SQL NVARCHAR(MAX) = '';
DECLARE @TableName NVARCHAR(128), @ColumnName NVARCHAR(128), @IsClientID BIT, @IsPersonalData BIT;

DECLARE cursor_tables CURSOR FOR 
SELECT TableName, ColumnName, IsClientID, IsPersonalData 
FROM Metadata_Tables_Columns 
WHERE IsClientID = 1 OR IsPersonalData = 1;

OPEN cursor_tables;
FETCH NEXT FROM cursor_tables INTO @TableName, @ColumnName, @IsClientID, @IsPersonalData;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Jeśli to kolumna z ID klienta, zapisujemy te wartości do późniejszego użycia
    IF @IsClientID = 1
    BEGIN
        SET @SQL = 'SELECT DISTINCT ' + QUOTENAME(@ColumnName) + ' AS ClientID INTO #TempClients FROM ' + QUOTENAME(@TableName) + ' WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL';
        EXEC sp_executesql @SQL;
    END

    -- Jeśli to kolumna z danymi osobowymi, anonimizujemy
    IF @IsPersonalData = 1
    BEGIN
        DECLARE @NewValue NVARCHAR(MAX);
        -- Ustalenie nowej wartości w zależności od typu danych
        IF @ColumnName LIKE '%PESEL%' SET @NewValue = REPLICATE('1', 11); -- PESEL ma 11 cyfr
        ELSE IF @ColumnName LIKE '%IMIE%' OR @ColumnName LIKE '%NAZWISKO%' SET @NewValue = 'Anonim';
        ELSE IF @ColumnName LIKE '%TELEFON%' OR @ColumnName LIKE '%DOWOD%' OR @ColumnName LIKE '%NIP%' SET @NewValue = REPLICATE('0', 10); -- Założenie, że te numery mają 10 cyfr
        ELSE IF @ColumnName LIKE '%REGON%' SET @NewValue = REPLICATE('0', 14); -- REGON ma 14 cyfr
        ELSE IF @ColumnName LIKE '%EMAIL%' SET @NewValue = 'anonim@anonim.pl';

        -- Aktualizacja danych i logowanie zmian
        SET @SQL = '
        UPDATE t SET ' + QUOTENAME(@ColumnName) + ' = @NewValue,
        INSERT INTO #Anonimization_Log (ClientID, TableName, ColumnName, OldValue, NewValue)
        SELECT c.ClientID, ''' + @TableName + ''', ''' + @ColumnName + ''', t.' + QUOTENAME(@ColumnName) + ', @NewValue
        FROM ' + QUOTENAME(@TableName) + ' t
        INNER JOIN #TempClients c ON t.' + QUOTENAME(@ColumnName) + ' = c.ClientID
        WHERE t.' + QUOTENAME(@ColumnName) + ' != @NewValue OR t.' + QUOTENAME(@ColumnName) + ' IS NULL';

        EXEC sp_executesql @SQL, N'@NewValue NVARCHAR(MAX)', @NewValue;
    END

    FETCH NEXT FROM cursor_tables INTO @TableName, @ColumnName, @IsClientID, @IsPersonalData;
END

CLOSE cursor_tables;
DEALLOCATE cursor_tables;

-- 3. Generowanie raportu
-- Raport zawiera tylko te rekordy, które zostały zmienione (OldValue różni się od NewValue)
SELECT 
    l.ClientID,
    l.TableName,
    l.ColumnName,
    l.OldValue,
    l.NewValue
FROM #Anonimization_Log l
WHERE l.OldValue IS NOT NULL AND l.OldValue != l.NewValue
ORDER BY l.ClientID, l.TableName, l.ColumnName;

-- 4. Czyszczenie tymczasowych tabel
DROP TABLE #Anonimization_Log;
DROP TABLE #TempClients;
