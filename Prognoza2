Aby poprawić model prognozowania narastającej sprzedaży i wykorzystać modele ARIMA oraz SARIMA, wykonamy następujące kroki:

1. Importowanie bibliotek
Najpierw zaimportujemy niezbędne biblioteki.

python
Skopiuj kod
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.seasonal import seasonal_decompose
2. Wczytanie danych
Załadujemy dane do Pandas DataFrame.

python
Skopiuj kod
# Wczytanie danych
df = pd.read_csv('cumulative_sales_data.csv')

# Przekształcenie daty na format daty
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

# Wyświetlenie pierwszych kilku wierszy danych
print(df.head())
3. Eksploracja danych
Zbadamy dane, aby zrozumieć ich strukturę i odnaleźć potencjalne wzorce.

python
Skopiuj kod
# Podstawowe informacje o danych
print(df.info())

# Opis statystyczny danych
print(df.describe())

# Wizualizacja danych sprzedażowych w czasie
plt.figure(figsize=(10, 6))
sns.lineplot(data=df, x='Date', y='CumulativeSales')
plt.title('Cumulative Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Cumulative Sales')
plt.show()
4. Analiza sezonowości
Użyjemy dekompozycji sezonowej do analizy danych.

python
Skopiuj kod
# Dekompozycja sezonowa
decomposition = seasonal_decompose(df['CumulativeSales'], model='additive', period=30)
fig = decomposition.plot()
plt.show()
5. Trening modelu ARIMA
Najpierw przetestujemy model ARIMA.

python
Skopiuj kod
from statsmodels.tsa.arima.model import ARIMA

# Podział danych na zbiór treningowy i testowy
train_size = int(len(df) * 0.8)
train, test = df[:train_size], df[train_size:]

# Inicjalizacja i trening modelu ARIMA
arima_model = ARIMA(train['CumulativeSales'], order=(5, 1, 0))
arima_model_fit = arima_model.fit()

# Prognozowanie
arima_forecast = arima_model_fit.forecast(steps=len(test))

# Ewaluacja modelu ARIMA
mse_arima = mean_squared_error(test['CumulativeSales'], arima_forecast)
print(f'ARIMA Mean Squared Error: {mse_arima}')

# Wizualizacja prognozy ARIMA
plt.figure(figsize=(10, 6))
plt.plot(train['CumulativeSales'], label='Train')
plt.plot(test['CumulativeSales'], label='Test')
plt.plot(test.index, arima_forecast, label='ARIMA Forecast')
plt.legend()
plt.show()
6. Trening modelu SARIMA
Następnie przetestujemy model SARIMA, który uwzględnia sezonowość.

python
Skopiuj kod
# Inicjalizacja i trening modelu SARIMA
sarima_model = SARIMAX(train['CumulativeSales'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))
sarima_model_fit = sarima_model.fit(disp=False)

# Prognozowanie
sarima_forecast = sarima_model_fit.forecast(steps=len(test))

# Ewaluacja modelu SARIMA
mse_sarima = mean_squared_error(test['CumulativeSales'], sarima_forecast)
print(f'SARIMA Mean Squared Error: {mse_sarima}')

# Wizualizacja prognozy SARIMA
plt.figure(figsize=(10, 6))
plt.plot(train['CumulativeSales'], label='Train')
plt.plot(test['CumulativeSales'], label='Test')
plt.plot(test.index, sarima_forecast, label='SARIMA Forecast')
plt.legend()
plt.show()
Podsumowanie
Powyższy kod przedstawia pełne wdrożenie modeli ARIMA i SARIMA do prognozowania narastającej sprzedaży. Model SARIMA powinien lepiej radzić sobie z sezonowością danych, co może prowadzić do lepszych prognoz.

Wnioski i Dalsze Kroki
Porównanie modeli: Porównaj wyniki modeli ARIMA i SARIMA, aby zobaczyć, który z nich daje lepsze wyniki.
Optymalizacja parametrów: Przeprowadź optymalizację parametrów modeli (grid search) w celu znalezienia najlepszych parametrów order i seasonal_order.
Dalsze ulepszenia: Możesz także rozważyć inne modele szeregów czasowych, takie jak Prophet od Facebooka, lub bardziej zaawansowane techniki uczenia maszynowego, takie jak LSTM.
Implementacja i optymalizacja modeli wymaga iteracyjnego podejścia, dlatego warto regularnie testować i dostosowywać modele do specyfiki danych.
