Tak, rozwiązanie może być dostosowane do prognozowania narastającej sprzedaży na koniec przyszłego miesiąca. W tym celu należy zmienić zakres prognozowania modeli ARIMA i SARIMA, aby przewidzieć wartości do końca następnego miesiąca. Przyjmijmy, że dane są dostępne do końca bieżącego miesiąca, a my chcemy przewidzieć sumę sprzedaży do końca kolejnego miesiąca.

Kroki:
Importowanie bibliotek
Wczytanie danych
Eksploracja danych
Podział danych na zbiór treningowy i testowy
Użycie auto_arima do dopasowania najlepszego modelu ARIMA
Użycie auto_arima do dopasowania najlepszego modelu SARIMA
Prognozowanie na koniec przyszłego miesiąca
Poniżej przedstawiam szczegółowy kod dla każdego kroku:

1. Importowanie bibliotek
python
Skopiuj kod
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.statespace.sarimax import SARIMAX
from pmdarima import auto_arima
2. Wczytanie danych
Załadujemy dane do Pandas DataFrame.

python
Skopiuj kod
# Wczytanie danych
df = pd.read_csv('cumulative_sales_data.csv')

# Przekształcenie daty na format daty
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

# Wyświetlenie pierwszych kilku wierszy danych
print(df.head())
3. Eksploracja danych
Zbadamy dane, aby zrozumieć ich strukturę i odnaleźć potencjalne wzorce.

python
Skopiuj kod
# Podstawowe informacje o danych
print(df.info())

# Opis statystyczny danych
print(df.describe())

# Wizualizacja danych sprzedażowych w czasie
plt.figure(figsize=(10, 6))
sns.lineplot(data=df, x='Date', y='CumulativeSales')
plt.title('Cumulative Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Cumulative Sales')
plt.show()
4. Podział danych na zbiór treningowy i testowy
Podzielimy dane na zbiór treningowy i testowy.

python
Skopiuj kod
# Podział danych na zbiór treningowy i testowy
train_size = int(len(df) * 0.8)
train, test = df[:train_size], df[train_size:]
5. Użycie auto_arima do dopasowania najlepszego modelu ARIMA
python
Skopiuj kod
# Dopasowanie najlepszego modelu ARIMA za pomocą auto_arima
arima_model = auto_arima(train['CumulativeSales'], 
                         seasonal=False, 
                         stepwise=True,
                         trace=True)

# Wyświetlenie podsumowania modelu
print(arima_model.summary())

# Prognozowanie na koniec przyszłego miesiąca
future_periods = len(test) + 30  # Założenie, że test ma długość jednego miesiąca, prognoza na kolejne 30 dni
arima_forecast = arima_model.predict(n_periods=future_periods)

# Wizualizacja prognozy ARIMA
plt.figure(figsize=(10, 6))
plt.plot(train['CumulativeSales'], label='Train')
plt.plot(test['CumulativeSales'], label='Test')
plt.plot(df.index[-len(test):], arima_forecast[:len(test)], label='ARIMA Forecast')
plt.plot(pd.date_range(df.index[-1], periods=31, freq='D')[1:], arima_forecast[len(test):], label='ARIMA Future Forecast')
plt.legend()
plt.show()
6. Użycie auto_arima do dopasowania najlepszego modelu SARIMA
python
Skopiuj kod
# Dopasowanie najlepszego modelu SARIMA za pomocą auto_arima
sarima_model = auto_arima(train['CumulativeSales'], 
                          seasonal=True, 
                          m=12,  # okresowość roczna
                          stepwise=True,
                          trace=True)

# Wyświetlenie podsumowania modelu
print(sarima_model.summary())

# Prognozowanie na koniec przyszłego miesiąca
sarima_forecast = sarima_model.predict(n_periods=future_periods)

# Wizualizacja prognozy SARIMA
plt.figure(figsize=(10, 6))
plt.plot(train['CumulativeSales'], label='Train')
plt.plot(test['CumulativeSales'], label='Test')
plt.plot(df.index[-len(test):], sarima_forecast[:len(test)], label='SARIMA Forecast')
plt.plot(pd.date_range(df.index[-1], periods=31, freq='D')[1:], sarima_forecast[len(test):], label='SARIMA Future Forecast')
plt.legend()
plt.show()
Podsumowanie
Powyższy kod pozwala prognozować narastającą sprzedaż do końca przyszłego miesiąca. Dzięki wykorzystaniu auto_arima, zarówno modele ARIMA, jak i SARIMA są automatycznie dopasowywane do danych, co powinno zapewnić optymalne parametry modeli.

Wnioski i Dalsze Kroki
Porównanie modeli: Porównaj wyniki prognoz ARIMA i SARIMA, aby zobaczyć, który model lepiej sprawdza się w Twoich danych.
Optymalizacja: Możesz dostosować parametry auto_arima, takie jak seasonal, m, i inne, aby lepiej dopasować modele do specyfiki danych.
Dalsze ulepszenia: Rozważ zastosowanie innych technik modelowania szeregów czasowych lub kombinacji modeli w celu poprawy dokładności prognoz.
Implementacja i optymalizacja modeli wymaga iteracyjnego podejścia, dlatego warto regularnie testować i dostosowywać modele do specyfiki danych.
