Masz rację. X_test nie zawiera kolumny date, ponieważ po podziale danych na cechy (features) i cel (target), kolumna date została pominięta. Możemy użyć oryginalnych danych do wizualizacji rzeczywistych wartości sprzedaży. Aby to zrobić, musimy zadbać o to, by daty odpowiadały wartościom w X_test.

Poniżej znajduje się poprawiony kod, który obejmuje generowanie prognoz na zbiorze testowym i ich wizualizację wraz z rzeczywistymi danymi sprzedaży.

1. Zbieranie danych
python
Skopiuj kod
import pandas as pd

# Wczytanie danych z pliku CSV
data = pd.read_csv('sales_data.csv')

# Konwersja kolumny daty na typ datetime
data['date'] = pd.to_datetime(data['date'])

# Wyświetlenie kilku pierwszych wierszy danych
print(data.head())
2. Przygotowanie danych
python
Skopiuj kod
import numpy as np
from sklearn.model_selection import train_test_split

# Ekstrakcja cech czasowych
data['year'] = data['date'].dt.year
data['month'] = data['date'].dt.month
data['day'] = data['date'].dt.day
data['weekday'] = data['date'].dt.weekday

# Przygotowanie cech (features) i celu (target)
features = ['year', 'month', 'day', 'weekday', 'promotion', 'holiday', 'features']
X = data[features]
y = data['sales']

# Podział danych na zbiór treningowy i testowy
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Zapisanie dat dla zbioru testowego do późniejszej wizualizacji
dates_test = data.loc[X_test.index, 'date']
3. Trenowanie modelu
python
Skopiuj kod
import xgboost as xgb
from sklearn.metrics import mean_squared_error

# Inicjalizacja i trenowanie modelu XGBoost
model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, max_depth=5)
model.fit(X_train, y_train)

# Prognozowanie na zbiorze testowym
y_pred = model.predict(X_test)

# Obliczenie błędu średniokwadratowego (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f'MSE: {mse}')
4. Prognozowanie
python
Skopiuj kod
# Prognozowanie sprzedaży na koniec miesiąca
last_date = data['date'].max()
next_date = last_date + pd.DateOffset(months=1)
next_year = next_date.year
next_month = next_date.month
next_day = next_date.day
next_weekday = next_date.weekday()

# Przygotowanie wartości cech dla prognozy
# Wartości 'promotion' i 'holiday' mogą być określone na podstawie znanych planów promocyjnych lub historycznych danych
next_promotion = 0  # zakładamy brak promocji
next_holiday = 0    # zakładamy brak święta
next_features_value = 0  # średnia wartość cechy 'features'

next_month_features = np.array([[next_year, next_month, next_day, next_weekday, next_promotion, next_holiday, next_features_value]])
next_month_sales_pred = model.predict(next_month_features)
print(f'Prognozowana sprzedaż na koniec miesiąca: {next_month_sales_pred[0]}')
5. Wizualizacja wyników
python
Skopiuj kod
import matplotlib.pyplot as plt
import seaborn as sns

# Wizualizacja rzeczywistych vs prognozowanych wartości sprzedaży
plt.figure(figsize=(10, 6))
plt.plot(data['date'], data['sales'], label='Rzeczywiste dane sprzedaży')
plt.plot(dates_test, y_pred, label='Prognozowane dane sprzedaży', linestyle='--', marker='o')
plt.xlabel('Data')
plt.ylabel('Sprzedaż')
plt.title('Rzeczywiste vs Prognozowane dane sprzedaży')
plt.legend()
plt.show()
W ten sposób wizualizacja będzie prawidłowa, ponieważ użyjemy oryginalnych dat z dates_test do dopasowania prognozowanych wartości sprzedaży. Dzięki temu wykres przedstawia zarówno rzeczywiste, jak i prognozowane dane w jednym miejscu.
