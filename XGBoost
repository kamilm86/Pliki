Program do wyliczenia prognozy sprzedaży na koniec miesiąca za pomocą XGBoost w Pythonie wymaga kilku kroków: zbierania danych, przygotowania danych, trenowania modelu, prognozowania oraz wizualizacji wyników. Poniżej znajdziesz szczegółowy opis każdego z tych kroków wraz z przykładowym kodem.

1. Zbieranie danych
Dane sprzedaży mogą pochodzić z różnych źródeł, takich jak pliki CSV, bazy danych, API itp. Na potrzeby tego przykładu załóżmy, że mamy dane w pliku CSV.

python
Skopiuj kod
import pandas as pd

# Wczytanie danych z pliku CSV
data = pd.read_csv('sales_data.csv')

# Wyświetlenie kilku pierwszych wierszy danych
print(data.head())
2. Przygotowanie danych
Przygotowanie danych obejmuje czyszczenie, przekształcanie i podział na zbiór treningowy oraz testowy. Zakładamy, że dane zawierają kolumny takie jak date, sales, features.

python
Skopiuj kod
import numpy as np
from sklearn.model_selection import train_test_split

# Konwersja kolumny daty na typ datetime
data['date'] = pd.to_datetime(data['date'])

# Ekstrakcja cech czasowych
data['year'] = data['date'].dt.year
data['month'] = data['date'].dt.month
data['day'] = data['date'].dt.day

# Przygotowanie cech (features) i celu (target)
X = data[['year', 'month', 'day', 'features']]
y = data['sales']

# Podział danych na zbiór treningowy i testowy
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
3. Trenowanie modelu
XGBoost to wydajna biblioteka do boostingu drzew decyzyjnych. Instalacja: pip install xgboost.

python
Skopiuj kod
import xgboost as xgb
from sklearn.metrics import mean_squared_error

# Inicjalizacja i trenowanie modelu XGBoost
model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, max_depth=5)
model.fit(X_train, y_train)

# Prognozowanie na zbiorze testowym
y_pred = model.predict(X_test)

# Obliczenie błędu średniokwadratowego (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f'MSE: {mse}')
4. Prognozowanie
Prognozowanie sprzedaży na koniec miesiąca.

python
Skopiuj kod
# Prognozowanie sprzedaży na koniec miesiąca
last_date = data['date'].max()
next_date = last_date + pd.DateOffset(months=1)

next_month_features = np.array([[next_date.year, next_date.month, next_date.day, some_feature_value]])
next_month_sales_pred = model.predict(next_month_features)
print(f'Prognozowana sprzedaż na koniec miesiąca: {next_month_sales_pred[0]}')
5. Wizualizacja wyników
Użycie bibliotek do wizualizacji, takich jak Matplotlib i Seaborn.

python
Skopiuj kod
import matplotlib.pyplot as plt
import seaborn as sns

# Wizualizacja rzeczywistych vs prognozowanych wartości sprzedaży
plt.figure(figsize=(10, 6))
plt.plot(data['date'], data['sales'], label='Rzeczywiste dane sprzedaży')
plt.plot(X_test['date'], y_pred, label='Prognozowane dane sprzedaży', linestyle='--')
plt.xlabel('Data')
plt.ylabel('Sprzedaż')
plt.title('Rzeczywiste vs Prognozowane dane sprzedaży')
plt.legend()
plt.show()
Podsumowanie
Ten program obejmuje pełny cykl przygotowania danych, trenowania modelu XGBoost, prognozowania sprzedaży i wizualizacji wyników. Dostosowanie kodu do specyficznych wymagań, takich jak różne źródła danych lub dodatkowe cechy, może wymagać dalszych modyfikacji.
